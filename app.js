// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
let tg = window.Telegram.WebApp;
tg.expand();
tg.ready();

console.log("INLIFE App –∑–∞–ø—É—â–µ–Ω!");

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö
let events = [];
let users = [];
let currentUser = null;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
function saveEventsToStorage() {
    localStorage.setItem('inlife_events', JSON.stringify(events));
    console.log("üíæ –°–æ–±—ã—Ç–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage");
}

function loadEventsFromStorage() {
    const savedEvents = localStorage.getItem('inlife_events');
    if (savedEvents) {
        events = JSON.parse(savedEvents);
        console.log("üìÇ –°–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:", events.length);
    }
}

function saveUsersToStorage() {
    localStorage.setItem('inlife_users', JSON.stringify(users));
    console.log("üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage");
}

function loadUsersFromStorage() {
    const savedUsers = localStorage.getItem('inlife_users');
    if (savedUsers) {
        users = JSON.parse(savedUsers);
        console.log("üìÇ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ localStorage:", users.length);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function initCurrentUser() {
    const user = tg.initDataUnsafe.user;
    if (user) {
        currentUser = {
            id: user.id,
            username: user.username || '–±–µ–∑ username',
            firstName: user.first_name || '',
            lastName: user.last_name || '',
            fullName: '',
            birthday: '',
            joinedAt: new Date().toISOString()
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –±–∞–∑–µ
        const existingUser = users.find(u => u.id === user.id);
        if (!existingUser) {
            users.push(currentUser);
            saveUsersToStorage();
        } else {
            currentUser = existingUser;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        updateProfileDisplay();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
function updateProfileDisplay() {
    if (currentUser) {
        document.getElementById('profile-display-name').textContent = 
            currentUser.fullName || `${currentUser.firstName} ${currentUser.lastName}`.trim() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
        document.getElementById('profile-username').textContent = `@${currentUser.username}`;
        
        if (currentUser.fullName) {
            document.getElementById('profile-fullname').value = currentUser.fullName;
        }
        
        if (currentUser.birthday) {
            document.getElementById('profile-birthday').value = currentUser.birthday;
        }

        // –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        if (currentUser.fullName || currentUser.birthday) {
            showSavedProfile();
        }

        updateProfileStats();
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
function showSavedProfile() {
    const profileForm = document.getElementById('profile-form');
    const profileStats = document.querySelector('.profile-stats');
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    profileForm.style.display = 'none';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    let savedProfileHTML = `
        <div class="saved-profile">
            <div class="saved-profile-header">
                <h3 style="margin-bottom: 8px; color: var(--ios-text);">–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</h3>
                <p style="color: var(--ios-text-secondary); margin-bottom: 16px; font-size: 16px;">
                    ${currentUser.fullName || `${currentUser.firstName} ${currentUser.lastName}`.trim()}
                </p>
    `;
    
    if (currentUser.birthday) {
        const birthDate = new Date(currentUser.birthday).toLocaleDateString('ru-RU');
        savedProfileHTML += `
            <div style="background: #f0f9ff; padding: 16px; border-radius: 12px; margin-bottom: 20px; border: 1px solid #b6e0fe;">
                <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px;">
                    <i class="ri-cake-line" style="color: #007AFF; font-size: 18px;"></i>
                    <span style="font-weight: 600; color: var(--ios-text);">–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthDate}</span>
                </div>
                <p style="font-size: 14px; color: var(--ios-text-secondary); margin: 0; line-height: 1.4;">
                    üéâ –ú—ã –Ω–∞–ø–æ–º–Ω–∏–º –∫–æ–º–∞–Ω–¥–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –≤–∞—Å!
                </p>
            </div>
        `;
    }
    
    savedProfileHTML += `</div></div>`;
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
    const profileCard = document.querySelector('.profile-card');
    const existingSavedProfile = profileCard.querySelector('.saved-profile');
    if (existingSavedProfile) {
        existingSavedProfile.remove();
    }
    
    profileCard.insertAdjacentHTML('beforeend', savedProfileHTML);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateProfileStats();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
function updateProfileStats() {
    document.getElementById('events-count').textContent = 
        events.filter(event => event.participants.includes(currentUser.id)).length;
    
    if (currentUser.birthday) {
        const daysLeft = getDaysUntilBirthday(currentUser.birthday);
        document.getElementById('days-till-birthday').textContent = 
            daysLeft > 0 ? daysLeft : 'üéâ';
    } else {
        document.getElementById('days-till-birthday').textContent = '-';
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
function checkAdminRights() {
    const user = tg.initDataUnsafe.user;
    const isAdmin = user && (user.username === 'NG_VLADIMIR' || user.username === 'Joyliana');
    
    if (isAdmin) {
        document.body.classList.add('show-admin');
        console.log("üëë –ê–¥–º–∏–Ω –¥–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω");
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –¥–Ω–µ–π –¥–æ —Å–æ–±—ã—Ç–∏—è
function getDaysLeft(eventDate) {
    const today = new Date();
    
    if (eventDate.includes('–∑–∞–≤—Ç—Ä–∞')) {
        return '–ó–∞–≤—Ç—Ä–∞';
    } else if (eventDate.includes('—Å–µ–≥–æ–¥–Ω—è')) {
        return '–°–µ–≥–æ–¥–Ω—è';
    } else if (eventDate.includes('31 –æ–∫—Ç—è–±—Ä—è')) {
        const oct31 = new Date(today.getFullYear(), 9, 31);
        const diffTime = oct31 - today;
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        return diffDays === 1 ? '–ó–∞–≤—Ç—Ä–∞' : `–û—Å—Ç–∞–ª–æ—Å—å ${diffDays} –¥–Ω–µ–π`;
    } else if (eventDate.includes('1 –Ω–æ—è–±—Ä—è') || eventDate.includes('2 –Ω–æ—è–±—Ä—è')) {
        return '–ó–∞–≤—Ç—Ä–∞';
    } else {
        return '–°–∫–æ—Ä–æ';
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
function getDaysUntilBirthday(birthday) {
    const today = new Date();
    const birthDate = new Date(birthday);
    const nextBirthday = new Date(today.getFullYear(), birthDate.getMonth(), birthDate.getDate());
    
    if (nextBirthday < today) {
        nextBirthday.setFullYear(today.getFullYear() + 1);
    }
    
    const diffTime = nextBirthday - today;
    return Math.ceil(diffTime / (1000 * 60 * 60 * 24));
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
function showScreen(screenId) {
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    document.getElementById(screenId).classList.add('active');
    updateActiveTab(screenId);
    
    if (screenId === 'events-screen') {
        renderEvents();
    } else if (screenId === 'admin-screen') {
        renderAdminEvents();
    } else if (screenId === 'profile-screen') {
        updateProfileDisplay();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
function updateActiveTab(screenId) {
    const tabMap = {
        'welcome-screen': 0,
        'events-screen': 1,
        'profile-screen': 2
    };
    
    document.querySelectorAll('.tab-item').forEach((tab, index) => {
        tab.classList.toggle('active', index === tabMap[screenId]);
    });
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ –∞–¥–º–∏–Ω–∫–∏
function showAdminTab(tabId) {
    document.querySelectorAll('.admin-tab').forEach(tab => {
        tab.classList.remove('active');
    });
    document.querySelectorAll('.admin-nav-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    
    document.getElementById(tabId).classList.add('active');
    event.currentTarget.classList.add('active');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–æ–∫
    if (tabId === 'users-tab') {
        renderUsersList();
    } else if (tabId === 'birthdays-tab') {
        renderBirthdaysList();
    }
}

// –†–µ–Ω–¥–µ—Ä —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function renderEvents() {
    const container = document.getElementById('events-container');
    const emptyState = document.getElementById('empty-events');
    
    if (events.length === 0) {
        emptyState.style.display = 'block';
        container.innerHTML = '';
        return;
    }
    
    emptyState.style.display = 'none';
    
    container.innerHTML = events.map(event => `
        <div class="event-card">
            <div class="event-header">
                <h3 class="event-title">${event.title}</h3>
                <span class="event-badge">${getDaysLeft(event.date)}</span>
            </div>
            <div class="event-details">
                <div class="event-detail">
                    <i class="ri-calendar-line detail-icon"></i>
                    <span>${event.date}</span>
                </div>
                <div class="event-detail">
                    <i class="ri-map-pin-line detail-icon"></i>
                    <span>${event.location}</span>
                </div>
            </div>
            <button class="ios-button secondary ${event.participants.includes(currentUser?.id) ? 'success' : ''}" 
                    onclick="joinEvent(${event.id}, this)"
                    ${event.participants.includes(currentUser?.id) ? 'disabled' : ''}>
                <i class="ri-${event.participants.includes(currentUser?.id) ? 'checkbox-circle-line' : 'user-add-line'}"></i>
                ${event.participants.includes(currentUser?.id) ? '–°–∫–æ—Ä–æ —É–≤–∏–¥–∏–º—Å—è!' : '–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ'}
            </button>
        </div>
    `).join('');
}

// –†–µ–Ω–¥–µ—Ä —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
function renderAdminEvents() {
    const container = document.getElementById('admin-events-container');
    
    if (events.length === 0) {
        container.innerHTML = '<p style="text-align: center; color: var(--ios-text-secondary);">–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π</p>';
        return;
    }
    
    container.innerHTML = events.map(event => `
        <div class="admin-event-item">
            <div class="admin-event-info">
                <div class="admin-event-name">${event.title}</div>
                <div class="admin-event-meta">${event.date} ‚Ä¢ ${event.location}</div>
                <div class="admin-event-meta">${getDaysLeft(event.date)} ‚Ä¢ ${event.participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</div>
            </div>
            <div class="admin-event-actions">
                <button class="delete-btn" onclick="deleteEvent(${event.id})">
                    <i class="ri-delete-bin-line"></i>
                </button>
            </div>
        </div>
    `).join('');
}

// –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
function renderUsersList() {
    const container = document.getElementById('users-list-container');
    
    if (users.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <i class="ri-user-search-line empty-icon"></i>
                <p>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
            </div>
        `;
        return;
    }
    
    container.innerHTML = users.map(user => `
        <div class="user-item">
            <div class="user-info">
                <div class="user-name">${user.fullName || `${user.firstName} ${user.lastName}`.trim() || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</div>
                <div class="user-meta">@${user.username} ‚Ä¢ ${new Date(user.joinedAt).toLocaleDateString('ru-RU')}</div>
                ${user.birthday ? `<div class="user-meta">üéÇ ${new Date(user.birthday).toLocaleDateString('ru-RU')}</div>` : ''}
            </div>
            <div class="user-actions">
                <button class="message-btn" onclick="openUserProfile(${user.id})" title="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å">
                    <i class="ri-user-line"></i>
                </button>
            </div>
        </div>
    `).join('');
}

// –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π
function renderBirthdaysList() {
    const container = document.getElementById('birthdays-list-container');
    
    const upcomingBirthdays = users
        .filter(user => user.birthday)
        .map(user => ({
            ...user,
            daysUntil: getDaysUntilBirthday(user.birthday)
        }))
        .filter(user => user.daysUntil <= 30)
        .sort((a, b) => a.daysUntil - b.daysUntil);
    
    if (upcomingBirthdays.length === 0) {
        container.innerHTML = `
            <div class="empty-state">
                <i class="ri-cake-line empty-icon"></i>
                <p>–ë–ª–∏–∂–∞–π—à–∏–µ –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
            </div>
        `;
        return;
    }
    
    container.innerHTML = upcomingBirthdays.map(user => `
        <div class="birthday-item">
            <div class="birthday-info">
                <div class="birthday-name">${user.fullName || `${user.firstName} ${user.lastName}`.trim()}</div>
                <div class="birthday-meta">@${user.username}</div>
                <div class="birthday-meta">
                    ${user.daysUntil === 0 ? 'üéâ –°–µ–≥–æ–¥–Ω—è!' : 
                      user.daysUntil === 1 ? 'üéÇ –ó–∞–≤—Ç—Ä–∞!' : 
                      `üéÇ –ß–µ—Ä–µ–∑ ${user.daysUntil} –¥–Ω–µ–π`}
                </div>
            </div>
            <div class="user-actions">
                <button class="message-btn" onclick="openUserProfile(${user.id})" title="–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å">
                    <i class="ri-user-line"></i>
                </button>
            </div>
        </div>
    `).join('');
}

// –ó–∞–ø–∏—Å—å –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
function joinEvent(eventId, button) {
    const event = events.find(e => e.id === eventId);
    if (!event || !currentUser) return;
    
    const originalHTML = button.innerHTML;
    button.innerHTML = '<i class="ri-loader-4-line"></i> –ó–∞–ø–∏—Å—ã–≤–∞–µ–º...';
    button.disabled = true;
    
    setTimeout(() => {
        if (!event.participants.includes(currentUser.id)) {
            event.participants.push(currentUser.id);
            saveEventsToStorage();
        }
        
        // ‚úÖ –§–ò–ö–° 1: –ó–µ–ª—ë–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–°–∫–æ—Ä–æ —É–≤–∏–¥–∏–º—Å—è!"
        button.innerHTML = '<i class="ri-checkbox-circle-line"></i> –°–∫–æ—Ä–æ —É–≤–∏–¥–∏–º—Å—è!';
        button.classList.remove('secondary');
        button.classList.add('success');
        button.disabled = true;
        
        tg.showPopup({
            title: '–£—Å–ø–µ—à–Ω–æ!',
            message: '–¢—ã –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —Å–æ–±—ã—Ç–∏–µ! –ñ–¥—ë–º —Ç–µ–±—è!',
            buttons: [{ type: 'ok' }]
        });
        
        renderEvents();
        updateProfileStats();
        
    }, 800);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
function addEvent(eventData) {
    const newEvent = {
        id: Date.now(),
        title: eventData.title,
        date: eventData.date,
        location: eventData.location,
        participants: []
    };
    
    events.unshift(newEvent);
    saveEventsToStorage();
    renderEvents();
    renderAdminEvents();
    
    tg.showAlert('–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
}

// –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
function deleteEvent(eventId) {
    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ?')) {
        events = events.filter(event => event.id !== eventId);
        saveEventsToStorage();
        renderEvents();
        renderAdminEvents();
        tg.showAlert('–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ');
    }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
function saveProfile(profileData) {
    if (!currentUser) return;
    
    currentUser.fullName = profileData.fullName;
    currentUser.birthday = profileData.birthday;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
    const userIndex = users.findIndex(u => u.id === currentUser.id);
    if (userIndex !== -1) {
        users[userIndex] = currentUser;
        saveUsersToStorage();
    }
    
    updateProfileDisplay();
    showSavedProfile();
    tg.showAlert('–ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω!');
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
function openUserProfile(userId) {
    const user = users.find(u => u.id === userId);
    if (user) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
        tg.openTelegramLink(`tg://user?id=${userId}`);
    }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å –î–†
function sendBirthdayMessage(userId) {
    const user = users.find(u => u.id === userId);
    if (user) {
        const message = `üéâ –î–æ—Ä–æ–≥–æ–π ${user.fullName || user.username}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! –ñ–µ–ª–∞–µ–º –±–ª–∞–≥–æ—Å–ª–æ–≤–µ–Ω–∏–π –æ—Ç –ë–æ–≥–∞!`;
        tg.showAlert(`–ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: "${message}"`);
    }
}

// –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
function sendBroadcast(message) {
    tg.showAlert(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: "${message}"`);
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—É–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
function showComingSoon() {
    tg.showAlert('–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö!');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    loadEventsFromStorage();
    loadUsersFromStorage();
    initCurrentUser();
    checkAdminRights();
    renderEvents();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø—Ä–æ—Ñ–∏–ª—è
    document.getElementById('profile-form').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = {
            fullName: document.getElementById('profile-fullname').value,
            birthday: document.getElementById('profile-birthday').value
        };
        
        saveProfile(formData);
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
    document.getElementById('add-event-form').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = {
            title: document.getElementById('event-title').value,
            date: document.getElementById('event-date').value,
            location: document.getElementById('event-location').value
        };
        
        addEvent(formData);
        this.reset();
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã —Ä–∞—Å—Å—ã–ª–∫–∏
    document.getElementById('broadcast-form').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const message = document.getElementById('broadcast-message').value;
        if (message && confirm(`–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?`)) {
            sendBroadcast(message);
            this.reset();
        }
    });
    
    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Ç–µ–º—É Telegram
    if (tg.colorScheme === 'dark') {
        document.documentElement.style.setProperty('--ios-bg', '#000000');
        document.documentElement.style.setProperty('--ios-card', '#1c1c1e');
    }
});